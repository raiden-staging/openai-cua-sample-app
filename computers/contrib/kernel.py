from playwright.sync_api import Browser, Page
from ..shared.base_playwright import BasePlaywrightComputer
from kernel import Kernel
from dotenv import load_dotenv
from utils import pp
load_dotenv()
client = Kernel()

def create_kernel_browser(stealth=True):
    """
    Creates a new Kernel browser instance.
    
    Kernel is a cloud infrastructure designed for agents that offers instant reusable browser sessions,
    sub-millisecond start-up, autoscaling browsers and more.
    
    You can find more information about Kernel at https://onkernel.com
    or Kernel Browser Quickstart guide at https://docs.onkernel.com/build/remote-browsers
    
    IMPORTANT: This Kernel computer requires the KERNEL_API_KEY environment variable to be set.
    Make sure to include this in your .env file or environment variables.
    
    Returns:
        The created Kernel browser instance with stealth mode enabled by default.
    """
    # Create browser with stealth
    kernel_browser = client.browsers.create(stealth=stealth)
    pp(kernel_browser)
    return kernel_browser


class KernelBrowser(BasePlaywrightComputer):
    """
    Connects to a remote Chromium instance using a CDP URL generated by the Kernel API.
    
    Args:
        cdp_ws_url (str): The WebSocket URL for Chrome DevTools Protocol connection. If not provided , a new Kernel browser will be created. Default is None to create a new Kernel browser session.
        width (int): The width of the browser viewport. Default is 1024.
        height (int): The height of the browser viewport. Default is 768.
    """

    def __init__(
      self,
      cdp_ws_url: str = None,
      width: int = 1024,
      height: int = 768,
    ):
        super().__init__()
        self.dimensions = (width, height)
        self.cdp_ws_url = cdp_ws_url
        if not self.cdp_ws_url or not len(self.cdp_ws_url):
            kernel_browser = create_kernel_browser()
            self.cdp_ws_url = kernel_browser.cdp_ws_url

    def get_dimensions(self):
        return self.dimensions

    def _get_browser_and_page(self) -> tuple[Browser, Page]:
        # Connect to the remote browser using the CDP URL
        browser = self._playwright.chromium.connect_over_cdp(self.cdp_ws_url)
        # Use the first context or create one if none exists
        if browser.contexts: context = browser.contexts[0]
        else: context = browser.new_context()
        # Add event listeners for page creation and closure
        context.on("page", self._handle_new_page)
        # Create a new page and set viewport
        page = context.pages[0] if context.pages else context.new_page()
        page.set_viewport_size({"width": self.dimensions[0], "height": self.dimensions[1]})
        page.on("close", self._handle_page_close)
        # Optionally, navigate to a default page
        # page.goto("https://news.ycombinator.com")
        return browser, page

    def _handle_new_page(self, page: Page):
        """Handle the creation of a new page."""
        print("New page created")
        self._page = page
        page.on("close", self._handle_page_close)

    def _handle_page_close(self, page: Page):
        """Handle the closure of a page."""
        print("Page closed")
        if hasattr(self, "_browser") and self._page == page:
            if self._browser.contexts[0].pages:
                self._page = self._browser.contexts[0].pages[-1]
            else:
                print("Warning: All pages have been closed.")
                self._page = None
